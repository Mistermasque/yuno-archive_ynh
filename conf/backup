#!/usr/bin/env bash
# We don't stop the script on errors cause we want to backup all data we could backed up
#set -eu

#=========================================================#
#                     GLOBAL VARS                         #
#=========================================================#

declare -r CURRENT_DATE=$(date +"%y%m%d_%H%M")
# log file for mail notification
declare -r LOG_FILE="/tmp/${APP}_${CURRENT_DATE}.log"
# Global to store errors messages for mail
ERRORS=""

#=========================================================#
#                    SCRIPT FUNCTIONS                     #
#=========================================================#

### FUNCTION BEGIN
# Get hook scripts for backuing up conf or data app
# ARGUMENTS:
#   $1 (string) hook type. Can be : app|conf
# OUTPUTS: 
# 	Print help message to stdout
### FUNCTION END
filter_hooks() {
    sudo ls /usr/share/yunohost/hooks/backup/ /etc/yunohost/hooks.d/backup/ | grep "\-$1_" | cut -d"-" -f2 | uniq 2>> "$LOG_FILE"
}

### FUNCTION BEGIN
# Usage function to show help message
# OUTPUTS: 
# 	Print help message to stdout
### FUNCTION END
usage() {
    cat << MSG_USAGE
Script used to launch Yuno-archive backup according to configuration

Usage  :
   $(basename "$0") APP_ID [Options]

Arguments :
    APP_ID : Yuno-archive application Id (mandatory)

Options :
   -h : Show this message
MSG_USAGE
}

#=========================================================#
#                           MAIN                          #
#=========================================================#
while getopts "h" option; do
   case "${option}" in
      h)
         usage
         exit 0
      ;;
      *)
         usage
         exit 1
   esac
done

APP="$1"

if [ -z "$APP" ]; then
    echo "Error : This script expects a yuno-archive app id as first argument" >&2
    usage
    exit 1
fi

now="$(date "+%Y-%m-%d %H:%M:%S")"
echo "${now} START BACKUP ${APP}" >> "$LOG_FILE"

# Backup system part conf
conf=$(sudo yunohost app setting "${APP}" conf)
if [[ "$conf" = "1" ]]; then
    if ! sudo yunohost backup create -n auto_conf --method "${APP}_app" --system "$(filter_hooks conf)" >> "$LOG_FILE" 2>&1; then
        ERRORS+="\n[ERROR] The backup miserably failed to backup system configurations."
    fi
fi

# Backup system data
data=$(sudo yunohost app setting "${APP}" data)
if [[ "$data" = "1" ]]; then
    if ! sudo yunohost backup create -n auto_data --method "${APP}_app" --system "$(filter_hooks data)" >> "$LOG_FILE" 2>&1; then
        ERRORS+="\n[ERROR] The backup miserably failed to backup system data."
    fi
fi

# Backup all apps independently
apps=$(sudo yunohost app setting "${APP}" apps | tr -d ' ')
for application in $(sudo ls /etc/yunohost/apps/); do

    if ( [[ "$apps" =~ ^exclude: ]] && grep -wq "$application" <<< "$apps" ) ||
       ( [[ "$apps" != "all" ]] && [[ ! "$apps" =~ ^exclude: ]]  && ! grep -wq "$application" <<< "$apps" );
    then
        continue
    fi

    if sudo test ! -f "/etc/yunohost/apps/$application/scripts/backup" ; then
        ERRORS+="\n[WARN] The application $application has no backup script. This app won't be backed up."
        continue
    fi

    if ! sudo yunohost backup create -n "auto_$application" --method "${APP}_app" --apps "$application" | sudo tee -a "$LOG_FILE" 2>&1; then
        ERRORS+="\n[ERROR] The backup miserably failed to backup $application application."
    fi
done

now="$(date "+%Y-%m-%d %H:%M:%S")"
echo "${now} END BACKUP ${APP}" >> "$LOG_FILE"

#=========================================================
# SEND MAIL TO NOTIFY ABOUT SUCCEEDED OR FAILED OPERATIONS
#=========================================================

repository="$(sudo yunohost app setting "${APP}" repository)"
mailalert="$(sudo yunohost app setting "${APP}" mailalert)"
if [[  -n "$ERRORS" && $mailalert != "never" ]]; then
    cat <(echo -e "$ERRORS\n\n\n") "$LOG_FILE" | mail -a "Content-Type: text/plain; charset=UTF-8" -s "[Yuno-archive] Backup ${APP} failed onto $repository" admins
    rm -rf "$LOG_FILE"
    exit 1
elif [ "$mailalert" == "always" ]; then
    mail -a "Content-Type: text/plain; charset=UTF-8" -s "[Yuno-archive] Backup ${APP} succeeded onto $repository" admins < "$LOG_FILE"
    rm -rf "$LOG_FILE"
    exit 0
fi
